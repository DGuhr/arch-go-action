name: "Arch Go"
description: "Runs arch-go to perform architecture checks of your golang projects "
inputs:
  version:
    description: The version of arch-go to use
    required: false
    default: latest
  verbose:
    description: Let arch-go generate verbose output
    required: false
  generate-report:
    description: Whether an HTML report should be generated
    required: false
  working-directory:
    description: Working directory relative to the root directory
    default: ./

runs:
  using: composite
  steps:
    - name: Set up Go
      uses: actions/setup-go@cdcb36043654635271a94b9a6d1392de5bb323a7 # v5.0.1
      with:
        go-version: "1.22.4"
    - name: Get fdaines/arch-go
      shell: bash
      run: go install github.com/fdaines/arch-go@${{ inputs.version }}
    - name: Run arch-go
      id: arch-go-check
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        verbose_flag=$([ "${{ inputs.verbose }}" == "true" ] && echo "--verbose" || echo "" )
        report_flag=$([ "${{ inputs.generate-report }}" == "true" ] && echo "--html" || echo "" )
        arch-go ${verbose_flag} ${report_flag} 2>&1 | tee result.log
        exit_code=${PIPESTATUS[0]}
        archgo_result=$(cat result.log)
        archgo_result="${archgo_result//'%'/'%25'}"
        archgo_result="${archgo_result//$'\n'/'%0A'}"
        archgo_result="${archgo_result//$'\r'/'%0D'}"
        echo "checkresult=$archgo_result" >> $GITHUB_OUTPUT
        exit $exit_code
    - name: Upload report
      if: inputs.generate-report == 'true'
      uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
      with:
        name: report.html
        path: .arch-go/report.html
    - name: Add PR comment
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea #v7.0.1
      env:
        ARCHGO_RESULT: ${{steps.arch-go-check.outputs.checkresult}}
      with:
        script: |
          const result = process.env.ARCHGO_RESULT;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: result 
          })